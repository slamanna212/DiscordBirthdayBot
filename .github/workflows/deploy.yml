name: Deploy Discord Birthday Bot

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      discord_token:
        description: 'Discord Bot Token'
        required: true
        type: string
      discord_client_id:
        description: 'Discord Client ID'
        required: true
        type: string
      birthday_channel_id:
        description: 'Birthday Channel ID'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull latest image
      run: |
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

    - name: Deploy commands
      run: |
        echo "🔧 Deploying Discord slash commands..."
        docker run --rm \
          -e DISCORD_TOKEN="${{ inputs.discord_token }}" \
          -e DISCORD_CLIENT_ID="${{ inputs.discord_client_id }}" \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
          node scripts/deploy-commands.js

    - name: Deploy bot container
      run: |
        echo "🚀 Deploying Discord Birthday Bot..."
        
        # Stop and remove existing container if it exists
        docker stop birthday_bot_${{ inputs.environment }} 2>/dev/null || true
        docker rm birthday_bot_${{ inputs.environment }} 2>/dev/null || true
        
        # Create data directory
        mkdir -p ./data_${{ inputs.environment }}
        
        # Start new container
        docker run -d \
          --name birthday_bot_${{ inputs.environment }} \
          --restart unless-stopped \
          -e TZ=America/New_York \
          -e NODE_ENV=production \
          -e DISCORD_TOKEN="${{ inputs.discord_token }}" \
          -e DISCORD_CLIENT_ID="${{ inputs.discord_client_id }}" \
          -e BIRTHDAY_CHANNEL_ID="${{ inputs.birthday_channel_id }}" \
          -v "$(pwd)/data_${{ inputs.environment }}:/app/data" \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

    - name: Verify deployment
      run: |
        echo "✅ Verifying deployment..."
        
        # Wait a moment for container to start
        sleep 5
        
        # Check if container is running
        if docker ps | grep -q "birthday_bot_${{ inputs.environment }}"; then
          echo "✅ Container is running successfully"
          
          # Show container logs
          echo "📋 Container logs:"
          docker logs birthday_bot_${{ inputs.environment }} --tail 20
        else
          echo "❌ Container failed to start"
          docker logs birthday_bot_${{ inputs.environment }} || true
          exit 1
        fi

    - name: Deployment summary
      run: |
        echo "🎉 Deployment Summary"
        echo "===================="
        echo "Environment: ${{ inputs.environment }}"
        echo "Container: birthday_bot_${{ inputs.environment }}"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo ""
        echo "Management commands:"
        echo "📊 View logs: docker logs -f birthday_bot_${{ inputs.environment }}"
        echo "🛑 Stop bot: docker stop birthday_bot_${{ inputs.environment }}"
        echo "🔄 Restart bot: docker restart birthday_bot_${{ inputs.environment }}" 